# -*- coding: utf-8 -*-
"""MergeTripsandDemographics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/156_uDv8ZHBQDHY3syURKMZ-NSHLvCOyJ
"""

import pandas as pd
import numpy as np

demographics = pd.read_csv("drive/MyDrive/Trenton MOVES/Trenton/NewJersey34021Module1NN2ndRun.csv")
trips = pd.read_csv("drive/MyDrive/Trenton MOVES/Trenton/TrentonTrips")

demographics = demographics.drop(columns = "Unnamed: 0")

trips = trips.drop(columns = "Unnamed: 0")

trips = trips.drop(columns = "index")

demographics

trips

demographics = demographics.rename(columns={'Person ID Number': 'Person ID'})
trips = trips.rename(columns={'Person ID': 'Person ID'})

demographics.columns

demographics = demographics.reindex(columns=['Person ID', 'County Code', 'Residence State', 'Tract Code', 'Block Code', 'HH ID',
       'HH TYPE', 'Latitude', 'Longitude', 'Age', 'Sex',
       'Traveler Type', 'Income Bracket', 'Income Amount'])

demographics

trips = trips.reindex(columns=['Person ID', 'County Code', 'Trip Type', 'OType', 'OName', 'OFIPS',
       'OLon', 'OLat', 'OXCoord', 'OYCoord', 'ODepartureTime', 'DType',
       'DName', 'DFIPS', 'DLon', 'DLat', 'DXCoord', 'DYCoord', 'GCDistance'])
trips

trips

#List of all trips that have demographic data

#lista = []
#for i, row in enumerate (demographics.iloc[:,0]):
 # for i, element in enumerate (trips.iloc[:,0]):
   # if row == element:
    #  lista.append(trips.iloc[i])
    #  break
#lista = pd.DataFrame(lista)
#lista

#make sure that both dataframes have the same IDs
new = pd.DataFrame()
from pandas.core.algorithms import isin
i = 0
for row in demographics.iloc[:,0]:
  i = i +1
  value = trips.iloc[:,0].isin([row]).any()
  if value == True:
    new = new.append(demographics.iloc[i-1])

new = pd.DataFrame(new)

new.to_csv("drive/MyDrive/Trenton MOVES/Trenton/new.csv")

new = pd.read_csv("drive/MyDrive/Trenton MOVES/Trenton/new.csv")
new = new.drop(columns = "Unnamed: 0")
new['Person ID'] = new['Person ID'].astype(int)
new

trips

trips[1::]

other = pd.DataFrame()
from pandas.core.algorithms import isin
i = 0
for row in trips.iloc[:,0]:
  i = i +1
  value = new.iloc[:,0].isin([row]).any()
  if value == True:
    other = other.append(trips.iloc[i-1])

other = pd.DataFrame(other)
other.to_csv("drive/MyDrive/Trenton MOVES/Trenton/other.csv")

other

other = pd.read_csv("drive/MyDrive/Trenton MOVES/Trenton/other.csv")
other = other.drop(columns = "Unnamed: 0")
other['Person ID'] = other['Person ID'].astype(int)
other

#Create frequency table of id's in trips
frequency = other["Person ID"].value_counts()
frequency = pd.DataFrame(frequency)
frequency = frequency.reset_index(level=0)
frequency = frequency.sort_values(by=["index"])
frequency

new = new.sort_values(by=["Person ID"])
other = other.sort_values(by=["Person ID"])
demographic_freq = pd.DataFrame()

new

other

#Multiply every demographic by the amount of trips it has using the frequency table
for i, row in new.iterrows():
  c = 0
  while c < frequency.iloc[i,1]:
    demographic_freq = demographic_freq.append(row)
    c = c + 1

demographic_freq

demographic_freq.to_csv("drive/MyDrive/Trenton MOVES/Trenton/demographic_freq.csv")

demographic_freq = pd.read_csv("drive/MyDrive/Trenton MOVES/Trenton/demographic_freq.csv")
demographic_freq = demographic_freq.drop(columns = "Unnamed: 0")
demographic_freq['Person ID'] = demographic_freq['Person ID'].astype(int)
demographic_freq

other

demographic_freq

#Now that both dataframes have exactly the same rows, stack them together
both = pd.concat([other, demographic_freq], axis=1)
both

both.to_csv("drive/MyDrive/Trenton MOVES/Trenton/merged_data.csv")

merged_data = pd.read_csv ("drive/MyDrive/Trenton MOVES/Trenton/merged_data.csv")
merged_data = merged_data.drop(columns = "Unnamed: 0")
merged_data['Person ID'] = merged_data['Person ID'].astype(int)
merged_data

both = merged_data

#Filter by age
school_age = pd.DataFrame()
i = 0
for person in both.iloc[:,28]:
  if person in range(4,18):
    school_age = school_age.append(both.iloc[i])
  i = i +1

school_age = pd.DataFrame(school_age)
school_age.to_csv("drive/MyDrive/Trenton MOVES/Trenton/school_age.csv")

#Filter by orgin
origin = pd.DataFrame()
i = 0
for person in both.iloc[:,3]:
  if person == "S":
    origin = origin.append(both.iloc[i])
  i = i +1

origin = pd.DataFrame(origin)
origin.to_csv("drive/MyDrive/Trenton MOVES/Trenton/origin.csv")

#Filter by destination
destination = pd.DataFrame()
i = 0
for person in both.iloc[:,11]:
  if person == "S":
    destination = destination.append(both.iloc[i])
  i = i +1

destination = pd.DataFrame(destination)
destination.to_csv("drive/MyDrive/Trenton MOVES/Trenton/destination.csv")

#Filter by income - source below
#https://aspe.hhs.gov/topics/poverty-economic-mobility/poverty-guidelines/prior-hhs-poverty-guidelines-federal-register-references/2021-poverty-guidelines#threshholds
income = pd.DataFrame()
i = 0
for person in both.iloc[:,32]:
  if person < 12880:
    income = income.append(both.iloc[i])
  i = i +1

income = pd.DataFrame(income)
income.to_csv("drive/MyDrive/Trenton MOVES/income.csv")

income = pd.read_csv ("drive/MyDrive/Trenton MOVES/income.csv")
income = income.drop(columns = "Unnamed: 0")
income['Person ID'] = income['Person ID'].astype(int)
income